/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package wcrawler.GUI;

import java.awt.Dimension;
import java.awt.Toolkit;
import wcrawler.core.CrawlConfigurationHandler;
import wcrawler.information.CrawlConfiguration;

/**
 *
 * @author Vo Anh
 */
public class frmCrawlerOption extends javax.swing.JFrame {

    private CrawlConfiguration crawlConfiguration;
    private CrawlConfigurationHandler crawlConfigurationHandler;
    private WcrawlerManager wcrawlerManager;
    private final String politenessDelay = "politenessDelay";
    private final String connectionTimeout = "connectionTimeout";
    private final String maxConnectionPerHost = "maxConnectionPerHost";
    private final String maxTotalConnections = "maxTotalConnections";
    private final String maxDownloadPageSize = "maxDownloadPageSize";
    private final String maxConcurrentThread = "maxConcurrentThread";
//    private final String politenessPolicyEnable = "politenessPolicyEnable";

    /**
     * Creates new form frmCrawlerOption
     */
    public frmCrawlerOption() {
        initComponents();

        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);

        crawlConfigurationHandler = new CrawlConfigurationHandler();
        crawlConfiguration = crawlConfigurationHandler.loadCrawlConfigFromXml();
        LoadValue();
    }

    //Load value from file config.xml
    private void LoadValue() {
        txtPolitenessDelay.setText(String.valueOf(crawlConfiguration.getPolitenessDelay()));
        txtMaxConnectionPerHost.setText(String.valueOf(crawlConfiguration.getMaxConnectionPerHost()));
        txtConnectionTimeout.setText(String.valueOf(crawlConfiguration.getConnectionTimeout()));
        txtMaxConcurrentThread.setText(String.valueOf(crawlConfiguration.getMaxConcurrentThread()));
        txtMaxDownloadPageSize.setText(String.valueOf(crawlConfiguration.getMaxDownloadPageSize()));
        txtMaxTotalConnections.setText(String.valueOf(crawlConfiguration.getMaxTotalConnections()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pnlOption = new javax.swing.JPanel();
        lbPolitenessDelay = new javax.swing.JLabel();
        lbConnectionTimeout = new javax.swing.JLabel();
        lbConnectionPerHost = new javax.swing.JLabel();
        lbMaxTotalConnections = new javax.swing.JLabel();
        lbMaxDownloadPageSize = new javax.swing.JLabel();
        lbMaxConcurrentThread = new javax.swing.JLabel();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnDefault = new javax.swing.JButton();
        txtPolitenessDelay = new javax.swing.JTextField();
        txtConnectionTimeout = new javax.swing.JTextField();
        txtMaxConcurrentThread = new javax.swing.JTextField();
        txtMaxConnectionPerHost = new javax.swing.JTextField();
        txtMaxTotalConnections = new javax.swing.JTextField();
        txtMaxDownloadPageSize = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbPolitenessDelay.setText("Politeness Delay :");

        lbConnectionTimeout.setText("Connection Timeout :");

        lbConnectionPerHost.setText("Max Connection PerHost:");

        lbMaxTotalConnections.setText("Max Total Connections :");

        lbMaxDownloadPageSize.setText("Max Download Page Size :");

        lbMaxConcurrentThread.setText("Max Concurrent Thread :");

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnDefault.setText("Default");
        btnDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlOptionLayout = new javax.swing.GroupLayout(pnlOption);
        pnlOption.setLayout(pnlOptionLayout);
        pnlOptionLayout.setHorizontalGroup(
            pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOptionLayout.createSequentialGroup()
                        .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbPolitenessDelay)
                            .addComponent(lbConnectionTimeout)
                            .addComponent(lbMaxConcurrentThread))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtConnectionTimeout, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                            .addComponent(txtMaxConcurrentThread)
                            .addComponent(txtPolitenessDelay))
                        .addGap(22, 22, 22)
                        .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbMaxTotalConnections)
                            .addComponent(lbConnectionPerHost)
                            .addComponent(lbMaxDownloadPageSize)))
                    .addGroup(pnlOptionLayout.createSequentialGroup()
                        .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(btnDefault, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtMaxConnectionPerHost, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                    .addComponent(txtMaxTotalConnections)
                    .addComponent(txtMaxDownloadPageSize))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlOptionLayout.setVerticalGroup(
            pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOptionLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPolitenessDelay)
                    .addComponent(lbConnectionPerHost)
                    .addComponent(txtPolitenessDelay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaxConnectionPerHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbConnectionTimeout)
                    .addComponent(lbMaxTotalConnections)
                    .addComponent(txtConnectionTimeout, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaxTotalConnections, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbMaxDownloadPageSize)
                    .addComponent(lbMaxConcurrentThread)
                    .addComponent(txtMaxConcurrentThread, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMaxDownloadPageSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(pnlOptionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel)
                    .addComponent(btnDefault))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlOption, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        //Update file config
//        try {
        //Update politenessDelay
        crawlConfigurationHandler.updateCrawlConfigXml(politenessDelay, Integer.parseInt(txtPolitenessDelay.getText()));
        //Update connectionTimeout
        crawlConfigurationHandler.updateCrawlConfigXml(connectionTimeout, Integer.parseInt(txtConnectionTimeout.getText()));
        //Update maxConnectionPerHost
        crawlConfigurationHandler.updateCrawlConfigXml(maxConnectionPerHost, Integer.parseInt(txtMaxConnectionPerHost.getText()));
        //Update maxTotalConnections
        crawlConfigurationHandler.updateCrawlConfigXml(maxTotalConnections, Integer.parseInt(txtMaxTotalConnections.getText()));
        //Update maxDownloadPageSize
        crawlConfigurationHandler.updateCrawlConfigXml(maxDownloadPageSize, Integer.parseInt(txtMaxDownloadPageSize.getText()));
        //Update maxConcurrentThread
        crawlConfigurationHandler.updateCrawlConfigXml(maxConcurrentThread, Integer.parseInt(txtMaxConcurrentThread.getText()));

//        } catch (Exception ex) {
//             Logger.getLogger(CrawlConfigurationHandler.class.getName()).log(Level.SEVERE, null, ex);
//        }
        this.setVisible(false);
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefaultActionPerformed
        // TODO add your handling code here:
       
    }//GEN-LAST:event_btnDefaultActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
//        wcrawlerManager.ResetMain();

    }//GEN-LAST:event_btnCancelActionPerformed
    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(frmCrawlerOption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(frmCrawlerOption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(frmCrawlerOption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(frmCrawlerOption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new frmCrawlerOption().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDefault;
    private javax.swing.JButton btnOK;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbConnectionPerHost;
    private javax.swing.JLabel lbConnectionTimeout;
    private javax.swing.JLabel lbMaxConcurrentThread;
    private javax.swing.JLabel lbMaxDownloadPageSize;
    private javax.swing.JLabel lbMaxTotalConnections;
    private javax.swing.JLabel lbPolitenessDelay;
    private javax.swing.JPanel pnlOption;
    private javax.swing.JTextField txtConnectionTimeout;
    private javax.swing.JTextField txtMaxConcurrentThread;
    private javax.swing.JTextField txtMaxConnectionPerHost;
    private javax.swing.JTextField txtMaxDownloadPageSize;
    private javax.swing.JTextField txtMaxTotalConnections;
    private javax.swing.JTextField txtPolitenessDelay;
    // End of variables declaration//GEN-END:variables
}
